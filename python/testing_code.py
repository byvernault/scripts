"""
    TEST Script for different purpose
"""

#!/usr/bin/env python
# -*- coding: utf-8 -*-

__author__ = 'byvernault'
__email__ = 'b.yvernault@ucl.ac.uk'
__purpose__ = "Test Code"

import os
from dax import XnatUtils
import dicom, dicom.UID
from dicom.dataset import Dataset, FileDataset
import shutil
import time
import datetime
import nibabel as nib
import numpy as np
import collections

'''def write_dicom(pixel_array, filename, ds_copy, ds_ori, volume_number,
                series_number, sop_id):
    """
    INPUTS:
    pixel_array: 2D numpy ndarray.  If pixel_array is larger than 2D, errors.
    filename: string name for the output file.
    """
    # Set to zero negatives values in the image:
    pixel_array[pixel_array<0] = 0

    # Set the DICOM dataset
    file_meta = Dataset()
    file_meta.MediaStorageSOPClassUID = 'Secondary Capture Image Storage'
    file_meta.MediaStorageSOPInstanceUID = ds_ori.SOPInstanceUID
    file_meta.ImplementationClassUID = ds_ori.SOPClassUID
    ds = FileDataset(filename, {}, file_meta = file_meta, preamble="\0"*128)

    # Copy the tag from the original DICOM
    for tag, value in ds_ori.items():
        if tag != ds_copy.data_element("PixelData").tag:
            ds[tag] = value

    # Other tags to set
    ds.SeriesNumber = series_number
    sop_uid = sop_id + str(datetime.datetime.now()).replace('-','').replace(':','').replace('.','').replace(' ','')
    ds.SOPInstanceUID = sop_uid[:-1]
    ds.ProtocolName = ds_ori.ProtocolName
    ds.SeriesDescription = ds_ori.SeriesDescription + ' reg_f3d'
    ds.InstanceNumber = volume_number
    # Set time:
    ti = time.time()
    ds.ContentDate = str(datetime.date.today()).replace('-','')
    ds.ContentTime = str(ti)

    # Copy from T2 the orientation tags:
    ds.PatientPosition = ds_copy.PatientPosition
    ds[0x20,0x32] = ds_copy[0x20,0x32] # Image Position
    ds[0x20,0x37] = ds_copy[0x20,0x37] # Image Orientation
    ds[0x18,0x50] = ds_copy[0x18,0x50] # Slice Thicknes
    ds[0x18,0x88] = ds_copy[0x18,0x88] # Spacing Between Slices
    ds[0x18,0x1312] = ds_copy[0x18,0x1312] # In-plane Phase Encoding
    ds[0x28,0x10] = ds_copy[0x28,0x10] # rows
    ds[0x28,0x11] = ds_copy[0x28,0x11] # columns
    ds[0x28,0x30] = ds_copy[0x28,0x30] # Pixel spacing

    # Set the Image pixel array
    if pixel_array.dtype != np.uint16:
        pixel_array = pixel_array.astype(np.uint16)
    ds.PixelData = pixel_array.tostring()

    # Save the image
    ds.save_as(filename)

def convert_nifti_2_dicoms(nifti_path, dicom_target, dicom_source, output_folder, label=None):
    """
    Convert 4D niftis generated by reg_f3d into DICOM files.

    :param nifti_path: path to the nifti file
    :param dicom_source: one dicom file from the source
     for the registration for header info
    :param dicom_target: one dicom file from the target
     for the registration for header info
    :param output_folder: folder where the DICOM files will be saved
    :param label: name for the output dicom files
    :return: None
    """
    if not os.path.isfile(nifti_path):
        raise Exception("File %s not found after reg_f3d." % nifti_path)
    # Load image from NIFTI
    f_img = nib.load(nifti_path)
    f_img_data = f_img.get_data()

    # Load dicom headers
    if not os.path.isfile(dicom_target):
        raise Exception("DICOM File %s not found after reg_f3d." % dicom_target)
    t2_dcm_obj = dicom.read_file(dicom_target)
    if not os.path.isfile(dicom_source):
        raise Exception("DICOM File %s not found after reg_f3d." % dicom_source)
    adc_dcm_obj = dicom.read_file(dicom_source)

    # Series Number and SOP UID
    ti = time.time()
    series_number = 86532 + int(str(ti)[2:4]) + int(str(ti)[4:6])
    sop_id = adc_dcm_obj.SOPInstanceUID.split('.')
    sop_id = '.'.join(sop_id[:-1])+'.'

    for volume_index in range(f_img_data.shape[2]):
        filename = os.path.join(output_folder, '%s_%s.dcm' % (label, str(volume_index)))
        write_dicom(np.rot90(f_img_data[:, :, volume_index]), filename,
                    t2_dcm_obj, adc_dcm_obj, volume_index, series_number, sop_id)

if __name__ == '__main__':
    t2_dcm = "/Users/byvernault/Downloads/002AD_20120222/scans/80100000_T2_Axial/DICOM/1.2.826.0.1.1817913.212.1.1.1.51665365-80100000-1-2j1vyl.dcm"
    adc_dcm = "/Users/byvernault/Downloads/002AD_20120222/1.2.826.0.1.1817913.212.1.1.1.51665365-60200001-212-qp89ja.dcm"
    output_dcm = "/Users/byvernault/Downloads/002AD_20120222/output/output_%s.dcm"
    nii_img = "/Users/byvernault/Downloads/002AD_20120222/assessors/prostate_xnat_E00594/REG_F3D/ADC_reg_2_t2_reg_f3d.nii"

    convert_nifti_2_dicoms(nii_img, t2_dcm, adc_dcm, "/Users/byvernault/Downloads/002AD_20120222/output/", label="ADC_reg_f3d")'''


if __name__ == '__main__':
    folders = ['/Users/byvernault/ForBen/PICTURE/FOUND/',
               '/Users/byvernault/ForBen/PICTURE/NEEDED/']

    needed = list()
    found = list()
    subj_list = list()

    XNAT = XnatUtils.get_interface(host='https://prostate-xnat.cs.ucl.ac.uk', user='byvernault', pwd='20289_cmic')
    for subj in XnatUtils.list_subjects(XNAT, 'PICTURE'):
        try:
            _ = int(subj['label'][0])
            subj_list.append(subj['label'])
        except:
            continue
    print ','.join(subj_list)
    """for fname in folders:
        print 'FOLDER: %s' % fname
        for folder in os.listdir(fname):
            if os.path.isdir(os.path.join(fname, folder)):
                patient = folder.split('-')[0]
                str_code = ''
                int_code = ''
                for c in list(patient):
                    try:
                        _ = int(c)
                        int_code += c
                    except:
                        str_code += c

                subject_found = False
                if ('%s%s' % (int_code, str_code)).lower() in subjects_list \
                 or ('%s%s' % (str_code, int_code)).lower() in subjects_list:
                    subject_found = True

                if subject_found:
                    print 'Subject FOUND: %s' % patient

                #if subject_found:
                    #print '%s -> %s' % (os.path.join(fname, folder), os.path.join('/Users/byvernault/ForBen/PICTURE/FOUND', folder))
                    #shutil.move(os.path.join(fname, folder), os.path.join('/Users/byvernault/ForBen/PICTURE/FOUND', folder))
                #else:
                    #print '%s -> %s' % (os.path.join(fname, folder), os.path.join('/Users/byvernault/ForBen/PICTURE/NEEDED', folder))
                    #shutil.move(os.path.join(fname, folder), os.path.join('/Users/byvernault/ForBen/PICTURE/NEEDED', folder))"""
