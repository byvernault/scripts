"""
    TEST Script for different purpose
"""

#!/usr/bin/env python
# -*- coding: utf-8 -*-

__author__ = 'byvernault'
__email__ = 'b.yvernault@ucl.ac.uk'
__purpose__ = "Test Code"

import pyxnat
import os
import glob
import sys
import time
import dicom
import csv
import datetime
import numpy as np
import nibabel as nib
import subprocess as sb
import matplotlib.pyplot as plt
from dicom.dataset import Dataset, FileDataset
#import Ben_functions
from dax import XnatUtils

TAGS_TO_COPY = [0x00185100, #Patient Position
                0x00180050, # Slice Thicknes
                0x00180088, # Spacing Between Slices
                0x00181312, # In-plane Phase Encoding
                0x00200032, # Image Position
                0x00200037, # Image Orientation
                0x00201041, # Slice Location
                0x00280010, # rows
                0x00280011, # columns
                0x00280030] # Pixel spacing

def write_dicom(pixel_array, filename, ds_copy, ds_ori, volume_number,
                series_number, sop_id):
    """
    INPUTS:
    pixel_array: 2D numpy ndarray.  If pixel_array is larger than 2D, errors.
    filename: string name for the output file.
    """
    # Set to zero negatives values in the image:
    pixel_array[pixel_array<0] = 0

    # Set the DICOM dataset
    file_meta = Dataset()
    file_meta.MediaStorageSOPClassUID = 'Secondary Capture Image Storage'
    file_meta.MediaStorageSOPInstanceUID = ds_ori.SOPInstanceUID
    file_meta.ImplementationClassUID = ds_ori.SOPClassUID
    ds = FileDataset(filename, {}, file_meta = file_meta, preamble="\0"*128)

    # Copy the tag from the original DICOM
    for tag, value in ds_ori.items():
        if tag != ds_ori.data_element("PixelData").tag:
            ds[tag] = value

    # Other tags to set
    ds.SeriesNumber = series_number
    ds.SeriesDescription = ds_ori.SeriesDescription + ' reg_f3d'
    sop_uid = sop_id + str(datetime.datetime.now()).replace('-','').replace(':','').replace('.','').replace(' ','')
    ds.SOPInstanceUID = sop_uid[:-1]
    ds.ProtocolName = ds_ori.ProtocolName
    ds.InstanceNumber = volume_number+1

    # Copy from T2 the orientation tags:
    for tag in TAGS_TO_COPY:
        if tag in ds_copy:
            ds[tag] = ds_copy[tag]

    # Set the Image pixel array
    if pixel_array.dtype != np.uint16:
        pixel_array = pixel_array.astype(np.uint16)
    ds.PixelData = pixel_array.tostring()

    # Save the image
    ds.save_as(filename)

def convert_nifti_2_dicoms(nifti_path, dicom_targets, dicom_source, output_folder, label=None):
    """
    Convert 4D niftis generated by reg_f3d into DICOM files.

    :param nifti_path: path to the nifti file
    :param dicom_target: list of dicom files from the target
     for the registration for header info
    :param dicom_source: one dicom file from the source
     for the registration for header info
    :param output_folder: folder where the DICOM files will be saved
    :param label: name for the output dicom files
    :return: None
    """
    if not os.path.isfile(nifti_path):
        raise Exception("File %s not found after reg_f3d." % nifti_path)
    # Load image from NIFTI
    f_img = nib.load(nifti_path)
    f_img_data = f_img.get_data()

    # Load dicom headers
    if not os.path.isfile(dicom_source):
        raise Exception("DICOM File %s not found after reg_f3d." % dicom_source)
    adc_dcm_obj = dicom.read_file(dicom_source)

    # Make output_folder:
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    # Series Number and SOP UID
    ti = time.time()
    series_number = 86532 + int(str(ti)[2:4]) + int(str(ti)[4:6])
    sop_id = adc_dcm_obj.SOPInstanceUID.split('.')
    sop_id = '.'.join(sop_id[:-1])+'.'

    # Sort the DICOM T2 to create the ADC registered DICOMs
    dcm_obj_sorted = dict()
    for dcm_file in dicom_targets:
        # Load dicom headers
        if not os.path.isfile(dcm_file):
            raise Exception("DICOM File %s not found after reg_f3d." % dcm_file)
        t2_dcm_obj = dicom.read_file(dcm_file)
        dcm_obj_sorted[t2_dcm_obj[0x00200032].value[2]] = t2_dcm_obj
    dcm_obj_sorted_list = [dcm_obj_sorted[key] for key in sorted(dcm_obj_sorted)]

    for volume_index in range(f_img_data.shape[2]):
        if f_img_data.shape[2] > 100:
            filename = os.path.join(output_folder, '%s_%03d.dcm' % (label, volume_index+1))
        elif f_img_data.shape[2] > 10:
            filename = os.path.join(output_folder, '%s_%02d.dcm' % (label, volume_index+1))
        else:
            filename = os.path.join(output_folder, '%s_%d.dcm' % (label, volume_index+1))
        write_dicom(np.rot90(f_img_data[:, :, volume_index]), filename,
                    dcm_obj_sorted_list[volume_index], adc_dcm_obj, volume_index,
                    series_number, sop_id)

if __name__ == '__main__':
    #xnat = XnatUtils.get_interface()
    #for scan in XnatUtils.list_project_scans(xnat, 'MASTER'):
    #    if scan['ID'].startswith('0-') and 'DICOM' not in scan['resources']:
            #scan_obj = XnatUtils.get_full_object(xnat, scan)
            #scan_obj.delete()
    #        print scan['ID']
    f3ds = ['/Users/byvernault/Downloads/example_reg/assessors/prostate_xnat_E00835/60200001/files/REG_F3D/60200001_2_100100000_reg_f3d.nii.gz',
            '/Users/byvernault/Downloads/example_reg/assessors/prostate_xnat_E00835/120100001/REG_F3D/120100001_2_100100000_reg_f3d.nii.gz',
            '/Users/byvernault/Downloads/example_reg/assessors/prostate_xnat_E00835/120100002/REG_F3D/120100002_2_100100000_reg_f3d.nii.gz']
    output_folder = '/Users/byvernault/Downloads/example_reg/assessors/prostate_xnat_E00835/test2/'
    target = glob.glob('/Users/byvernault/Downloads/example_reg/scans/100100000_T2_Axial/DICOM/*')
    sources = ['/Users/byvernault/Downloads/example_reg/scans/60200001_DWI_ADC/DICOM/1.2.826.0.1.1817913.212.1.1.1.51929074-60200001-100-1x6dz1p.dcm',
               '/Users/byvernault/Downloads/example_reg/scans/120100001_DCE/DICOM/1.2.826.0.1.1817913.212.1.1.1.51929074-120100001-1-rcanwe.dcm',
               '/Users/byvernault/Downloads/example_reg/scans/120100002_DCE/DICOM/1.2.826.0.1.1817913.212.1.1.1.51929074-120100002-2-163ygat.dcm']
    label = ['60200001', '120100001', '120100002']
    for index, f3d_output in enumerate(f3ds):
        convert_nifti_2_dicoms(f3d_output, target, sources[index], os.path.join(output_folder, 'OSIRIX'), label='test_'+label[index])


    """data_dir = '/Users/byvernault/DATA/Prisma_upgrade/TRI_DRC/'
    index = 0
    for folder in os.listdir(data_dir):
        if os.path.isdir(os.path.join(data_dir, folder)):
            index += 1
            #print 'FOLDER: %s' % folder
            # Read from dicom the name of subject and the hospital ID to get the Process
            dcm = find_one_dicom_in_folder(os.path.join(data_dir, folder), recursively=True)
            ds = dicom.read_file(dcm)
            name = ds.PatientName.replace("'","")
            hid = ds.PatientID
            if hid:
                print "%s,Prisma_upgrade,subj_%02d,,%s" % (hid, index, os.path.join(data_dir, folder))
            else:
                print "%s,Prisma_upgrade,subj_%02d,,%s" % (name, index, os.path.join(data_dir, folder))

    """
    """data_dir = '/Users/byvernault/ForBen/MASTER/Follow_up/'
    l = Ben_functions.read_excel('/Users/byvernault/Downloads/MASTER.xlsx')
    found = list()
    for folder in os.listdir(data_dir):
        if os.path.isdir(os.path.join(data_dir, folder)):
            print 'FOLDER: %s' % folder
            if folder == 'Pro-03-HUR':
                name = 'HUGHES^RICHARD'
                hid = '91153482'
            elif folder == 'Pro-48-NST':
                name = 'STEPHENSON^NEIL'
                hid = '05006719'
            elif folder == 'Pro-46-AWA':
                name = 'WALMSLEY^ALLAN'
                hid = 'M/360941'
            elif folder == 'Pro-02-STR':
                name = 'STEYN^RALPH'
                hid = '40729592'
            else:
                # Read from dicom the name of subject and the hospital ID to get the Process
                dcm = find_one_dicom_in_folder(os.path.join(data_dir, folder), recursively=True)
                ds = dicom.read_file(dcm)
                name = ds.PatientName.replace("'","")
                hid = ds.PatientID
            pro = [row['Subject ID'] for row in l['Sheet1'] if row['Hospital ID'][1:-1] == hid]
            if not pro:
                print "WARNING: %s not found in spreadsheet." % hid
            elif len(pro) > 1:
                raise Exception('Too many row found with Hospital ID: %s' % hid)
            else:
                found.append('"%s"' % hid)
                print "%s-%s%s" % (pro[0], name.split('^')[1][0], name[0:2])
                os.rename(os.path.join(data_dir, folder), os.path.join(data_dir, "%s-%s%s" % (pro[0], name.split('^')[1][0], name[0:2])))

    for row in l['Sheet1']:
        if row['Hospital ID'] not in found:
            print 'No data for %s - %s' % (row['Hospital ID'], row['Initial'])"""
